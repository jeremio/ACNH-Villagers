# Nom du workflow
name: CI Checks

# Déclencheurs du workflow
on:
  push:
    branches: [main, master] # On inclut 'main' et 'master' pour être sûr
  pull_request:
    branches: [main, master]

jobs:
  build-and-test:
    # L'environnement d'exécution
    runs-on: ubuntu-latest

    strategy:
      matrix:
        # Spécifier la version de Node.js.
        node-version: [22.x]

    steps:
      # 1. Récupération du code du dépôt
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Configuration de pnpm
      - name: Set up pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10.15.0 # Assurez-vous que cette version correspond à votre packageManager

      # 3. Configuration de Node.js avec le cache pnpm
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: pnpm

      # 4. Installation des dépendances
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # 5. Lancement des vérifications statiques (linting, types)
      - name: Run linter
        run: pnpm run lint
      - name: Run TypeScript type check
        run: pnpm run type-check

      # 6. Lancement des tests unitaires
      # Le flag --run est spécifique à Vitest pour s'assurer qu'il ne reste pas en mode watch
      - name: Run unit tests
        run: pnpm run test:unit -- --run

      # 7. Installation des navigateurs pour Playwright
      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps

      # 8. Construction de l'application pour la production
      # Cette étape est cruciale pour que les tests e2e tournent sur le code final
      - name: Build project
        run: pnpm run build

      # 9. Lancement des tests de bout en bout (E2E) sur le build de production
      # Assurez-vous que votre script "test:e2e" utilise la configuration webServer de Playwright
      # qui lance `pnpm run preview` pour servir le dossier `dist`.
      - name: Run e2e tests
        run: pnpm run test:e2e

      # 10. Affichage de la taille du build pour information
      - name: Display build folder size
        run: |
          echo "Build output in 'dist/':"
          ls -lh dist/
          echo "Total size of 'dist/' folder:"
          du -sh dist/

      # 11. Téléversement du rapport d'analyse du build comme artefact
      - name: Upload visualizer report
        uses: actions/upload-artifact@v4
        with:
          name: visualizer-report
          # Spécifiez le chemin exact de votre rapport.
          # Il est recommandé de le configurer pour qu'il soit généré dans 'dist/'.
          path: dist/stats.html
          if-no-files-found: warn # Ne fait pas échouer le job si le rapport est absent.
